{"version":3,"file":"static/js/757.6f63cabd.chunk.js","mappings":"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","sources":["components/MovieCast/MovieCast.styled.jsx","components/MovieReviews/MovieReviews.styled.jsx","components/MovieReviews/MovieReviews.jsx","hooks/useFetchMovieReviews.jsx","helpers/transformMovies.js","helpers/transformMovieById.js","service/movies-service.js","helpers/transformMovieCast.js","helpers/transformMovieReviews.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const MovieAddContainer = styled.ul`\n  display: flex;\n  flex-direction: column;\n  margin: 8px;\n`;\n\nexport const MovieCastItem = styled.li`\n  margin: 8px;\n`;","import styled from '@emotion/styled';\n\nexport const ReviewsText = styled.p`\n  margin-bottom: 12px;\n  color: #434455;\n`;\n\nexport const ReviewsTitle = styled.h3`\n  margin-bottom: 16px;\n  color: #2E2F42;\n`;","import { useFetchMovieReviews } from \"hooks/useFetchMovieReviews\";\nimport { ReviewsText, ReviewsTitle } from \"./MovieReviews.styled\";\nimport { MovieAddContainer } from \"components/MovieCast/MovieCast.styled\";\n\nconst MovieReviews = () => {\n  const { reviews, error, isLoading } = useFetchMovieReviews();\n\n  return (\n    <div>\n      {error && <p>{error}</p>}\n      {isLoading && <p>Is Loading...</p>}\n      {!isLoading && reviews.length > 0 ? <MovieAddContainer>\n        {\n          reviews.map(({ author, content, id }) => <li key={id}>\n            <ReviewsTitle>{`Author: ${author}`}</ReviewsTitle>\n            <ReviewsText>{content}</ReviewsText>\n          </li>)\n        }\n      </MovieAddContainer> : <p>We don't have any reviews for this movie</p>}\n    </div>\n  );\n};\n\nexport default MovieReviews;","import { useState, useEffect } from \"react\";\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from \"service/movies-service\";\n\nexport const useFetchMovieReviews = () => {\n  const [reviews, setReviews] = useState({});\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(null);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getMovieReviews(movieId);\n        setReviews(data)\n      } catch (error) {\n        setError(error.status_message);\n      } finally {\n        setIsLoading(false);\n      };\n    }\n    fetchData();\n  }, [movieId]);\n  return { reviews, error, isLoading };\n};","export const transformMovies = ({ results }) => {\n  return results.map(({ title, name, id }) =>\n  ({\n    title: title ? title : name,\n    id: id\n  })\n  );\n};","import notFound from \"images/71367678-website-error-404.-page-not-found..webp\";\nexport const transformMovieById = ({ title, name, id, vote_average, overview, genres, release_date, poster_path }) =>\n({\n  title: title ? title : name,\n  id,\n  userScore: `${Math.round(vote_average * 10)}%`,\n  overview,\n  genres: genres.map(genre => genre.name).join(\" \"),\n  releaseDate: new Date(release_date).getFullYear(),\n  poster: poster_path ? `https://image.tmdb.org/t/p/w185${poster_path}` : notFound\n});","import axios from 'axios';\nimport { transformMovies, transformMovieById, transformMovieCast, transformMovieRewiews } from 'helpers';\n\nconst options = {\n  method: 'GET',\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {language: 'en-US'},\n  headers: {\n    accept: 'application/json',\n    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyNzlhODIzZTI5MmRhZDEzYTI4NWExOTMxNzJjYzJkOSIsInN1YiI6IjY0YTg0ZGUwOWM5N2JkMDBhZGU5OWNjZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.x6wA3r3IaV30vcsiYQBrUvuHxc8ByDuquBCTZG7iu5o'\n  }\n};\n\nexport const getTrandingMovies = async () => {\n  const { data } = await axios.get('/trending/movie/week', options)\n  const movies = transformMovies(data);\n\n  return movies;\n};\n\nexport const getSearchedMovies = async (query) => {\n  const { data } = await axios.get(`/search/movie?query=${query}`, options)\n  const movies = transformMovies(data);\n\n  return movies;\n};\n\nexport const getMovieDetails = async (id) => {\n  const { data } = await axios.get(`/movie/${id}`, options)\n  const movie = transformMovieById(data);\n\n  return movie;\n};\n\nexport const getMovieCredits = async (id) => {\n  const { data } = await axios.get(`/movie/${id}/credits`, options)\n  const cast = transformMovieCast(data);\n\n  return cast;\n};\n\nexport const getMovieReviews = async (id) => {\n  const { data } = await axios.get(`/movie/${id}/reviews`, options)\n  const reviews = transformMovieRewiews(data);\n\n  return reviews;\n};","import notFound from \"images/71367678-website-error-404.-page-not-found..webp\";\nexport const transformMovieCast = ({ cast }) => {\n  return cast.map(({ character, credit_id, name, profile_path }) =>\n  ({\n    character,\n    credit_id,\n    name,\n    photo: profile_path ? `https://image.tmdb.org/t/p/w45${profile_path}` : notFound\n  })\n  );\n};","export const transformMovieRewiews = ({ results }) => {\n  return results.map(({ author, content, id }) =>\n  ({\n    author,\n    content,\n    id\n  })\n  );\n};"],"names":["MovieAddContainer","styled","MovieCastItem","ReviewsText","ReviewsTitle","useState","reviews","setReviews","error","setError","isLoading","setIsLoading","movieId","useParams","useEffect","fetchData","getMovieReviews","data","status_message","useFetchMovieReviews","length","map","author","content","id","transformMovies","results","title","name","transformMovieById","vote_average","overview","genres","release_date","poster_path","userScore","Math","round","genre","join","releaseDate","Date","getFullYear","poster","notFound","options","method","baseURL","params","language","headers","accept","Authorization","getTrandingMovies","axios","movies","getSearchedMovies","query","getMovieDetails","movie","getMovieCredits","cast","character","credit_id","profile_path","photo"],"sourceRoot":""}